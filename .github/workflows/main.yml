name: CI

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK Cache
        uses: actions/cache@v3
        with:
          path: /usr/local/java
          key: ${{ runner.os }}-jdk-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-jdk-

      - name: Use JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          cache: 'maven'

      - name: Set up Maven Cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Use Maven 3
        uses: maven/maven-action@v3
        with:
          maven: '3'

      - name: Set SonarQube API Token
        run: |
          echo "SONAR_API_TOKEN=${{ secrets.SONAR_API_TOKEN }}" >> $GITHUB_ENV

      - name: Run Unit Tests
        run: mvn test

      - name: Run Integration Tests
        run: mvn verify -DskipUnitTests

      - name: Build with Maven
        run: mvn clean install

      - name: Run SonarQube Analysis
        run: |
          mvn clean package sonar:sonar -Dsonar.projectKey=your-project-key -Dsonar.sources=.
          echo "SonarQube analysis completed"

      - name: Wait for SonarQube Quality Gate
        run: |
          sonar-scanner -Dsonar.login=$SONAR_API_TOKEN -Dsonar.qualitygate.wait=true
        env:
          SONAR_API_TOKEN: ${{ secrets.SONAR_API_TOKEN }}

      - name: Set Nexus Credentials
        run: |
          echo "NEXUS_USERNAME=${{ env.NEXUS_USERNAME }}" >> $GITHUB_ENV
          echo "NEXUS_PASSWORD=${{ env.NEXUS_PASSWORD }}" >> $GITHUB_ENV

      - name: Read Project Version
        id: read_version
        run: |
          mvn help:property -Dexpression=project.version | grep version | awk '{print $NF}'
        # Define Nexus Repository based on Version

      - name: Set Nexus Repository
        run: |
          # Corrected line using the `contains` function:
          echo "::set-output name=nexus_repo::${{ steps.read_version.outputs.version  contains '-SNAPSHOT'  ? 'javaapp-snapshot' : 'javaapp-release' }}"

      - name: Upload WAR to Nexus
        uses: nitzsche/action-nexus@v2.1.0
        with:
          serverUrl: ${{ env.NEXUS_URL }}
          repository: ${{ steps.set_nexus_repo.outputs.nexus_repo }}
          username: ${{ env.NEXUS_USERNAME }}
          password: ${{ env.NEXUS_PASSWORD }}
          file: target/Uber.jar
          version: ${{ steps.read_version.outputs.version }}

      - name: Login to Docker Hub
        uses: docker/login@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker image build -t ${{ github.repository_name }}:v1.${GITHUB_RUN_ID} .
          docker tag ${{ github.repository_name }}:v1.${GITHUB_RUN_ID} vishalkalchuri/${{ github.repository_name }}:v1.${GITHUB_RUN_ID}
